---
import Layout from "@/layouts/main.astro";
import AnimeCard from "@/components/anime-card.astro";
import Pagination from "@/components/pagination.astro";
import { animeSchema } from "@/lib/schemas/anime";
import type { z } from "zod";

const url = new URL(Astro.request.url);
const search = url.searchParams.get("search");
const searchType = url.searchParams.get("type");
const _page = url.searchParams.get("page") || "1";
const page = isNaN(parseInt(_page || "")) ? 1 : parseInt(_page);
// TODO: Even tho it's "search-all" it only fetches animes for now
// TODO: Add page size, pagination,all the jazz...
const api_url = new URL(import.meta.env.ANIME_API + "/anime");
api_url.searchParams.set("q", search ?? "");
api_url.searchParams.set("page", page.toString() ?? "1");
const result = animeSchema.safeParse(await (await fetch(api_url)).json());
if (!result.success) {
  return Astro.redirect("/404");
}

let data: z.infer<(typeof animeSchema.shape)["data"]> = result.data.data;
if (searchType) {
  data = result.data.data.filter((anime) => anime.type === searchType);
}
---

<Layout title={search ?? ""}>
  <div>
    <p class="text-black text-lg mt-4 ml-10">Search results for "{search}"</p>
  </div>
  <div class="grid auto-fill-grid">
    {
      data.length ? null : (
        <p class="text-black ml-10">Hello darkness my old friend...</p>
      )
    }
    {data.map((anime) => <AnimeCard anime={anime} />)}
  </div>
  <div class="text-black flex justify-center mt-10">
    <Pagination
      value={page}
      count={result.data.pagination.last_visible_page}
      url={url}
    />
  </div>
</Layout>
